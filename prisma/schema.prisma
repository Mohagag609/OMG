// This is your Prisma schema file
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Users - للمصادقة
model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  email     String?  @unique
  fullName  String?
  role      String   @default("admin")
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("users")
}

// Customers
model Customer {
  id         String  @id @default(cuid())
  name       String
  phone      String  @unique
  nationalId String? @unique
  address    String?
  status     String  @default("نشط")
  notes      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  deletedAt  DateTime?
  
  @@map("customers")
}

// Units
model Unit {
  id        String  @id @default(cuid())
  code      String  @unique
  name      String?
  unitType  String  @default("سكني")
  area      String?
  floor     String?
  building  String?
  totalPrice Float  @default(0)
  status    String  @default("متاحة")
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
  
  @@map("units")
}

// Unit Partners
model UnitPartner {
  id        String  @id @default(cuid())
  unitId    String
  partnerId String
  percentage Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
  
  @@unique([unitId, partnerId])
  @@map("unit_partners")
}

// Contracts
model Contract {
  id              String   @id @default(cuid())
  unitId          String
  customerId      String
  start           DateTime
  totalPrice      Float
  discountAmount  Float    @default(0)
  brokerName      String?
  brokerPercent   Float    @default(0)
  brokerAmount    Float    @default(0)
  maintenanceDeposit Float @default(0)
  installmentType String   @default("شهري")
  installmentCount Int     @default(0)
  downPayment     Float    @default(0)
  paymentType     String   @default("installment")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  deletedAt       DateTime?
  
  @@map("contracts")
}

// Installments
model Installment {
  id        String   @id @default(cuid())
  unitId    String
  amount    Float
  dueDate   DateTime
  status    String   @default("معلق")
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
  
  @@map("installments")
}

// Safes
model Safe {
  id        String   @id @default(cuid())
  name      String   @unique
  balance   Float    @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
  
  @@map("safes")
}

// Transfers
model Transfer {
  id          String   @id @default(cuid())
  fromSafeId  String
  toSafeId    String
  amount      Float
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?
  
  @@map("transfers")
}

// Vouchers
model Voucher {
  id          String   @id @default(cuid())
  type        String   // receipt or payment
  date        DateTime
  amount      Float
  safeId      String
  description String
  payer       String?
  beneficiary String?
  linkedRef   String?  // Reference to unit, contract, etc.
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?
  
  @@map("vouchers")
}

// Brokers
model Broker {
  id        String   @id @default(cuid())
  name      String   @unique
  phone     String?
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
  
  @@map("brokers")
}

// Broker Dues
model BrokerDue {
  id        String   @id @default(cuid())
  brokerId  String
  amount    Float
  dueDate   DateTime
  status    String   @default("معلق")
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
  
  @@map("broker_dues")
}

// Partners
model Partner {
  id        String  @id @default(cuid())
  name      String
  phone     String?
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
  
  @@map("partners")
}

// Partner Debts
model PartnerDebt {
  id        String   @id @default(cuid())
  partnerId String
  amount    Float
  dueDate   DateTime
  status    String   @default("معلق")
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
  
  @@map("partner_debts")
}

// Partner Groups
model PartnerGroup {
  id        String   @id @default(cuid())
  name      String   @unique
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
  
  @@map("partner_groups")
}

// Partner Group Partners
model PartnerGroupPartner {
  id              String   @id @default(cuid())
  partnerGroupId  String
  partnerId       String
  percentage      Float
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  deletedAt       DateTime?
  
  @@unique([partnerGroupId, partnerId])
  @@map("partner_group_partners")
}

// Settings
model Settings {
  id    String @id @default(cuid())
  key   String @unique
  value String
  
  @@map("settings")
}

// Audit Log
model AuditLog {
  id          String   @id @default(cuid())
  action      String
  entityType  String
  entityId    String
  oldValues   String?  // JSON string
  newValues   String?  // JSON string
  userId      String?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())
  
  @@map("audit_logs")
}

// Key Value Store
model KeyVal {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("key_vals")
}

// Notifications
model Notification {
  id        String   @id @default(cuid())
  type      String
  title     String
  message   String
  userId    String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("notifications")
}