const { PrismaClient } = require('@prisma/client')
const ExcelJS = require('exceljs')

async function generateCashflowExcel() {
  const prisma = new PrismaClient({
    datasources: {
      db: {
        url: "postgresql://neondb_owner:npg_x5qvmpzF3hjX@ep-dawn-cell-adylfb98-pooler.c-2.us-east-1.aws.neon.tech/neondb?sslmode=require&channel_binding=require"
      }
    }
  })

  try {
    console.log('๐ ุฅูุดุงุก ุชูุฑูุฑ Excel ููุชุฏููุงุช ุงูููุฏูุฉ...')

    // ุฌูุจ ุงูุจูุงูุงุช
    const partners = await prisma.partner.findMany({
      where: {
        deletedAt: null
      },
      include: {
        unitPartners: {
          include: {
            unit: {
              include: {
                contracts: {
                  where: {
                    deletedAt: null
                  }
                }
              }
            }
          }
        }
      }
    })

    // ุฅูุดุงุก ููู Excel
    const workbook = new ExcelJS.Workbook()
    
    // ูุฑูุฉ ุงูุนูู ุงูุฑุฆูุณูุฉ
    const worksheet = workbook.addWorksheet('ุชุฏููุงุช ุงูุดุฑูุงุก ุงูููุฏูุฉ')
    
    // ุชูุณูู ุงูุฃุนูุฏุฉ
    worksheet.columns = [
      { header: 'ุงุณู ุงูุดุฑูู', key: 'partnerName', width: 20 },
      { header: 'ุงููุงุชู', key: 'phone', width: 15 },
      { header: 'ููุฏ ุงููุญุฏุฉ', key: 'unitCode', width: 15 },
      { header: 'ุงุณู ุงููุญุฏุฉ', key: 'unitName', width: 25 },
      { header: 'ุงููุจูู', key: 'building', width: 15 },
      { header: 'ุงูุทุงุจู', key: 'floor', width: 15 },
      { header: 'ุงููุณุงุญุฉ', key: 'area', width: 15 },
      { header: 'ุงูุณุนุฑ ุงูุฅุฌูุงูู', key: 'totalPrice', width: 15 },
      { header: 'ูุณุจุฉ ุงููุดุงุฑูุฉ %', key: 'percentage', width: 15 },
      { header: 'ุงููุณุท ุงูุดูุฑู', key: 'monthlyInstallment', width: 15 },
      { header: 'ุญุตุฉ ุงูุดุฑูู ุงูุดูุฑูุฉ', key: 'partnerShare', width: 20 },
      { header: 'ุงูุญุตุฉ ุงูุณูููุฉ', key: 'annualShare', width: 15 }
    ]

    // ุชูุณูู ุงูุฑุคูุณ
    worksheet.getRow(1).font = { bold: true, color: { argb: 'FFFFFF' } }
    worksheet.getRow(1).fill = {
      type: 'pattern',
      pattern: 'solid',
      fgColor: { argb: '366092' }
    }
    worksheet.getRow(1).alignment = { horizontal: 'center', vertical: 'middle' }

    let rowNumber = 2
    let totalMonthlyCashflow = 0

    // ููุก ุงูุจูุงูุงุช
    for (const partner of partners) {
      for (const unitPartner of partner.unitPartners) {
        const unit = unitPartner.unit
        const percentage = unitPartner.percentage

        // ุญุณุงุจ ุงููุณุท ุงูุดูุฑู
        let monthlyInstallment = 0
        for (const contract of unit.contracts) {
          if (contract.installmentType === 'ุดูุฑู' && contract.installmentCount > 0) {
            const remainingAmount = contract.totalPrice - contract.discountAmount - contract.downPayment
            monthlyInstallment = remainingAmount / contract.installmentCount
            break
          }
        }

        const partnerShare = (monthlyInstallment * percentage) / 100
        const annualShare = partnerShare * 12
        totalMonthlyCashflow += partnerShare

        worksheet.addRow({
          partnerName: partner.name,
          phone: partner.phone || '',
          unitCode: unit.code,
          unitName: unit.name || '',
          building: unit.building || '',
          floor: unit.floor || '',
          area: unit.area || '',
          totalPrice: unit.totalPrice,
          percentage: percentage,
          monthlyInstallment: monthlyInstallment,
          partnerShare: partnerShare,
          annualShare: annualShare
        })

        // ุชูุณูู ุงูุตู
        const row = worksheet.getRow(rowNumber)
        row.alignment = { horizontal: 'center', vertical: 'middle' }
        
        // ุชูููู ุงูุตููู ุงููุชูุงูุจุฉ
        if (rowNumber % 2 === 0) {
          row.fill = {
            type: 'pattern',
            pattern: 'solid',
            fgColor: { argb: 'F2F2F2' }
          }
        }

        rowNumber++
      }
    }

    // ุฅุถุงูุฉ ุตู ุงูุฅุฌูุงูู
    const totalRow = worksheet.addRow({
      partnerName: 'ุงูุฅุฌูุงูู',
      phone: '',
      unitCode: '',
      unitName: '',
      building: '',
      floor: '',
      area: '',
      totalPrice: '',
      percentage: '',
      monthlyInstallment: '',
      partnerShare: totalMonthlyCashflow,
      annualShare: totalMonthlyCashflow * 12
    })

    // ุชูุณูู ุตู ุงูุฅุฌูุงูู
    totalRow.font = { bold: true, color: { argb: 'FFFFFF' } }
    totalRow.fill = {
      type: 'pattern',
      pattern: 'solid',
      fgColor: { argb: 'D32F2F' }
    }
    totalRow.alignment = { horizontal: 'center', vertical: 'middle' }

    // ุชูุณูู ุงูุฃุฑูุงู
    worksheet.getColumn('totalPrice').numFmt = '#,##0'
    worksheet.getColumn('monthlyInstallment').numFmt = '#,##0.00'
    worksheet.getColumn('partnerShare').numFmt = '#,##0.00'
    worksheet.getColumn('annualShare').numFmt = '#,##0.00'

    // ุฅุถุงูุฉ ุญุฏูุฏ ููุฌุฏูู
    worksheet.eachRow((row, rowNumber) => {
      row.eachCell((cell, colNumber) => {
        cell.border = {
          top: { style: 'thin' },
          left: { style: 'thin' },
          bottom: { style: 'thin' },
          right: { style: 'thin' }
        }
      })
    })

    // ูุฑูุฉ ุงูุนูู ุงูุซุงููุฉ - ููุฎุต ุดูุฑู
    const summarySheet = workbook.addWorksheet('ููุฎุต ุดูุฑู')
    
    summarySheet.columns = [
      { header: 'ุงูุดูุฑ', key: 'month', width: 15 },
      { header: 'ุฅุฌูุงูู ุงูุชุฏูู ุงูุดูุฑู', key: 'monthlyTotal', width: 20 },
      { header: 'ุฅุฌูุงูู ุงูุชุฏูู ุงูุณููู', key: 'annualTotal', width: 20 }
    ]

    // ุชูุณูู ุฑุคูุณ ุงูููุฎุต
    summarySheet.getRow(1).font = { bold: true, color: { argb: 'FFFFFF' } }
    summarySheet.getRow(1).fill = {
      type: 'pattern',
      pattern: 'solid',
      fgColor: { argb: '366092' }
    }
    summarySheet.getRow(1).alignment = { horizontal: 'center', vertical: 'middle' }

    const months = [
      'ููุงูุฑ', 'ูุจุฑุงูุฑ', 'ูุงุฑุณ', 'ุฃุจุฑูู', 'ูุงูู', 'ููููู',
      'ููููู', 'ุฃุบุณุทุณ', 'ุณุจุชูุจุฑ', 'ุฃูุชูุจุฑ', 'ููููุจุฑ', 'ุฏูุณูุจุฑ'
    ]

    months.forEach((month, index) => {
      summarySheet.addRow({
        month: month,
        monthlyTotal: totalMonthlyCashflow,
        annualTotal: totalMonthlyCashflow * 12
      })
    })

    // ุชูุณูู ุฃุฑูุงู ุงูููุฎุต
    summarySheet.getColumn('monthlyTotal').numFmt = '#,##0.00'
    summarySheet.getColumn('annualTotal').numFmt = '#,##0.00'

    // ุฅุถุงูุฉ ุญุฏูุฏ ูููุฎุต
    summarySheet.eachRow((row, rowNumber) => {
      row.eachCell((cell, colNumber) => {
        cell.border = {
          top: { style: 'thin' },
          left: { style: 'thin' },
          bottom: { style: 'thin' },
          right: { style: 'thin' }
        }
      })
    })

    // ุญูุธ ุงูููู
    const fileName = `partner-cashflow-${new Date().toISOString().split('T')[0]}.xlsx`
    await workbook.xlsx.writeFile(fileName)

    console.log('โ ุชู ุฅูุดุงุก ููู Excel ุจูุฌุงุญ!')
    console.log(`๐ ุงุณู ุงูููู: ${fileName}`)
    console.log('')
    console.log('๐ ููุฎุต ุงูุชูุฑูุฑ:')
    console.log(`๐ฐ ุฅุฌูุงูู ุงูุชุฏูู ุงูุดูุฑู: ${totalMonthlyCashflow.toLocaleString()} ุฌููู`)
    console.log(`๐ฐ ุฅุฌูุงูู ุงูุชุฏูู ุงูุณููู: ${(totalMonthlyCashflow * 12).toLocaleString()} ุฌููู`)
    console.log(`๐ฅ ุนุฏุฏ ุงูุดุฑูุงุก: ${partners.length}`)
    console.log('')
    console.log('๐ฏ ุชุฏููุงุช ุดูุฑ ููููุจุฑ:')
    console.log(`๐ฐ ุฅุฌูุงูู ุงูุชุฏูู: ${totalMonthlyCashflow.toLocaleString()} ุฌููู`)

    return {
      fileName,
      totalMonthly: totalMonthlyCashflow,
      totalAnnual: totalMonthlyCashflow * 12,
      partnersCount: partners.length
    }

  } catch (error) {
    console.error('โ ุฎุทุฃ ูู ุฅูุดุงุก ููู Excel:', error.message)
    throw error
  } finally {
    await prisma.$disconnect()
  }
}

// ุชุดุบูู ุงูุณูุฑูุจุช
generateCashflowExcel()
  .then((result) => {
    console.log('๐ ุชู ุฅูุฌุงุฒ ุงููููุฉ ุจูุฌุงุญ!')
    process.exit(0)
  })
  .catch((error) => {
    console.error('๐ฅ ูุดู ูู ุฅูุฌุงุฒ ุงููููุฉ:', error)
    process.exit(1)
  })