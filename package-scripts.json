{
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "type-check": "tsc --noEmit",
    "test": "jest",
    "test:watch": "jest --watch",
    "test:coverage": "jest --coverage",
    "setup-db": "node scripts/setup-db.js",
    "create-users": "node scripts/create-users.js",
    "create-backup": "node scripts/create-backup.js",
    "restore-backup": "node scripts/restore-backup.js",
    "test-api": "node scripts/test-api-endpoints.js",
    "test-all": "node scripts/test-all-features.js",
    "docker:build": "docker build -t estate-management .",
    "docker:run": "docker run -p 3000:3000 estate-management",
    "docker:dev": "docker-compose up -d",
    "docker:stop": "docker-compose down",
    "docker:logs": "docker-compose logs -f",
    "pm2:start": "pm2 start ecosystem.config.js --env production",
    "pm2:stop": "pm2 stop estate-management",
    "pm2:restart": "pm2 restart estate-management",
    "pm2:reload": "pm2 reload estate-management",
    "pm2:delete": "pm2 delete estate-management",
    "pm2:logs": "pm2 logs estate-management",
    "pm2:monitor": "pm2 monit",
    "db:push": "prisma db push",
    "db:seed": "prisma db seed",
    "db:studio": "prisma studio",
    "db:generate": "prisma generate",
    "db:reset": "prisma migrate reset",
    "db:migrate": "prisma migrate dev",
    "db:deploy": "prisma migrate deploy",
    "format": "prettier --write .",
    "format:check": "prettier --check .",
    "analyze": "cross-env ANALYZE=true npm run build",
    "clean": "rm -rf .next node_modules/.cache",
    "clean:all": "rm -rf .next node_modules package-lock.json",
    "install:clean": "npm run clean:all && npm install",
    "health": "curl -f http://localhost:3000/api/monitoring/health",
    "export:data": "curl -o data-export.json http://localhost:3000/api/export",
    "import:data": "curl -X POST -H 'Content-Type: application/json' -d @data.json http://localhost:3000/api/import",
    "backup:create": "node scripts/create-backup.js",
    "backup:restore": "node scripts/restore-backup.js",
    "backup:list": "ls -la backups/",
    "logs:app": "tail -f logs/app.log",
    "logs:error": "tail -f logs/error.log",
    "logs:combined": "tail -f logs/combined.log",
    "monitor:health": "watch -n 5 'curl -s http://localhost:3000/api/monitoring/health | jq'",
    "monitor:metrics": "watch -n 10 'curl -s http://localhost:3000/api/monitoring/metrics | jq'",
    "deploy:netlify": "netlify deploy --prod",
    "deploy:vercel": "vercel --prod",
    "deploy:docker": "docker build -t estate-management . && docker push estate-management",
    "deploy:k8s": "kubectl apply -f k8s-deployment.yaml",
    "security:audit": "npm audit",
    "security:fix": "npm audit fix",
    "security:check": "npm audit --audit-level moderate",
    "deps:update": "npm update",
    "deps:outdated": "npm outdated",
    "deps:check": "npm ls --depth=0",
    "size:analyze": "npm run build && npx @next/bundle-analyzer",
    "perf:lighthouse": "lighthouse http://localhost:3000 --output html --output-path ./reports/lighthouse.html",
    "perf:test": "k6 run scripts/performance-test.js",
    "docs:generate": "typedoc src --out docs",
    "docs:serve": "http-server docs -p 8080",
    "release:patch": "npm version patch && git push --tags",
    "release:minor": "npm version minor && git push --tags",
    "release:major": "npm version major && git push --tags"
  }
}